# -*- coding: utf-8 -*-
"""Análise de sentimento.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lAqnfZ1Gozdk-vcvHD85az3TFq1x-qV9
"""

#Instala SDK do Google para a API de geração de texto e a API de linguagem natural
!pip install -q -U google-generativeai google-cloud-language

#Bibliotecas para Configs iniciais
import google.generativeai as genai
from google.cloud import language_v1
from google.oauth2 import service_account

#Configs das chaves de API Google Cloud e credencial da API Cloud Natural Language
GOOGLE_API_KEY = "AIzaSyCq8O7zS0BPBQ2EC6Yq6lchnWgV3dPujDM"
genai.configure(api_key=GOOGLE_API_KEY)
credentials_path = "/arboreal-moment-424521-q0-cd81e3ba3930.json"
credentials = service_account.Credentials.from_service_account_file(credentials_path)
client = language_v1.LanguageServiceClient(credentials=credentials)

#Configuração para geração de texto
generation_config = {
    "candidate_count": 1,
    "temperature": 0.5,
}
#Configuração importante para controlar o conteúdo gerado
safety_settings = {
    'HATE': 'BLOCK_NONE',
    'HARASSMENT': 'BLOCK_NONE',
    'SEXUAL': 'BLOCK_NONE',
    'DANGEROUS': 'BLOCK_NONE'
}

#Inicialização do modelo generativo
model = genai.GenerativeModel(model_name='gemini-1.0-pro',
                              generation_config=generation_config,
                              safety_settings=safety_settings)
chat = model.start_chat(history=[])

#Função para analisar o sentimento de um texto usando a API de linguagem natural do Google
def analisar_sentimento(texto):
    document = language_v1.Document(content=texto, type_=language_v1.Document.Type.PLAIN_TEXT)
     # Analisa o sentimento do documento
    response = client.analyze_sentiment(document=document)
    sentiment = response.document_sentiment
    score = sentiment.score
    magnitude = sentiment.magnitude

    #Determinar sentimento conforme o score
    if score >= 0.25:
        sentimento = "Positivo"
    elif score <= -0.25:
        sentimento = "Negativo"
    else:
        sentimento = "Neutro"

    return sentimento, score, magnitude

#Loop para interagir com o usuário
prompt = input('Digite seu feedback: ')
while prompt.lower() != "fim":
    if prompt.strip():
        response = chat.send_message(prompt)
        sentimento, score, magnitude = analisar_sentimento(prompt)
        print("Sentimento:", sentimento)
        print("Score:", score)
        print("Magnitude:", magnitude)
        print("Resposta:", response.text, '\n\n')
    else:
        print("Você não digitou nada. Tente novamente por favor.")
    prompt = input('Digite seu feedback: ')

#Melhorar formatação do texto de saída
import textwrap
from IPython.display import display
from IPython.display import Markdown

#Função para converter texto em formato Markdown
def to_markdown(text):
    text = text.replace('•', '  *')
    return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#Print do histórico de mensagens
for message in chat.history:
    display(to_markdown(f'**{message.role}**: {message.parts[0].text}'))
    print('-------------------------------------------')